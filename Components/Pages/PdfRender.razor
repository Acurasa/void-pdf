@page "/pdfviewer"
@inject EditService EditService
@inject IJSRuntime JSRuntime
@using YourBlazorApp.Services
@implements IDisposable

<h3>PDF редактор</h3>

<div class="row mb-3">
    <div class="col">
        <InputFile OnChange="@LoadFile" class="form-control" accept=".pdf" />
    </div>
    <div class="col">
        @if (pdfLoaded)
        {
            <button class="btn btn-primary" @onclick="EnableHighlightMode">
                @(highlightMode ? "Выключить режим выделения" : "Включить режим выделения")
            </button>
        }
    </div>
</div>

csharp
<div class="pdf-container" style="height: 100vh; width: 100%; border: 1px solid #ccc; position: relative;">
    @if (pdfLoaded)
    {
    <iframe id="pdfViewer" src="@pdfUrl#view=FitH" style="width: 100%; height: 100%;" @ref="viewerElement"></iframe>
    @if (highlightMode)
    {
    <div class="highlight-overlay" @ref="overlayElement"
         @onmousedown="StartSelection"
         @onmousemove="UpdateSelection"
         @onmouseup="EndSelection"
         style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; cursor: crosshair;">
        @if (isSelecting)
        {
        <div class="selection-box" style="@selectionStyle"></div>
        }
    </div>
    }
    }
    else
    {
    <div class="text-center p-5">
        <p>Загрузите PDF файл для начала работы</p>
    </div>
    }
</div>

@code {
    private bool pdfLoaded = false;
    private bool highlightMode = false;
    private bool isSelecting = false;
    private string pdfUrl = string.Empty;
    private MemoryStream pdfStream;
    private ElementReference viewerElement;
    private ElementReference overlayElement;
    public class DomRect
    {
        public double left { get; set; }
        public double top { get; set; }
        public double width { get; set; }
        public double height { get; set; }
    }
    // Координаты выделения
    private double startX, startY, currentX, currentY;
    private int currentPage = 0;
    private string selectionStyle => $"position: absolute; background-color: rgba(255, 255, 0, 0.3); border: 1px dashed #000; left: {Math.Min(startX, currentX)}px; top: {Math.Min(startY, currentY)}px; width: {Math.Abs(currentX - startX)}px; height: {Math.Abs(currentY - startY)}px;";
    
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Читаем файл в память
            pdfStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(pdfStream);
            pdfStream.Position = 0;
            
            // Создаем временный URL для отображения PDF
            var fileId = Guid.NewGuid().ToString();
            pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfStream.ToArray())}";
            pdfLoaded = true;
            
            // Сбрасываем режим выделения при загрузке нового файла
            highlightMode = false;
        }
    }
    
    private void EnableHighlightMode()
    {
        highlightMode = !highlightMode;
    }
    
    private void StartSelection(MouseEventArgs e)
    {
        if (highlightMode)
        {
            isSelecting = true;
            startX =  e.ClientX;
            startY =  e.ClientY;
            currentX = startX;
            currentY = startY;
        }
    }
    
    private void UpdateSelection(MouseEventArgs e)
    {
        if (isSelecting)
        {
            currentX = e.ClientX;
            currentY = e.ClientY;
        }
    }
    
    private async Task EndSelection(MouseEventArgs e)
    {
        if (isSelecting)
        {
            isSelecting = false;

            // Минимальный размер выделения
            double widthPixels = Math.Abs(currentX - startX);
            double heightPixels = Math.Abs(currentY - startY);
            if (widthPixels > 5 && heightPixels > 5)
            {
                // Получаем размеры элемента просмотра PDF через JS interop
                var rect = await JSRuntime.InvokeAsync<DomRect>("getElementRect", viewerElement);

                // Допустим, мы знаем размеры PDF-страницы в пунктах (points)
                // Здесь можно использовать размеры страницы из PdfSharp (page.Width и page.Height)
                // Если страница имеет размеры, например, A4 (595 x 842 points), замените значения ниже на реальные
                double pdfPageWidth = 595;
                double pdfPageHeight = 842;

                // Вычисляем масштаб преобразования (коэффициенты преобразования)
                double scaleX = pdfPageWidth / rect.width;
                double scaleY = pdfPageHeight / rect.height;

                // Преобразуем координаты выделения в координаты PDF
                double pdfX = (Math.Min(startX, currentX) - rect.left) * scaleX;
                double pdfY = (Math.Min(startY, currentY) - rect.top) * scaleY;
                double pdfWidth = widthPixels * scaleX;
                double pdfHeight = heightPixels * scaleY;

                // Сохраняем текущую позицию потока
                pdfStream.Position = 0;

                // Применяем выделение с вычисленными координатами
                var updatedPdfStream = EditService.HighlightText(
                    pdfStream,
                    pdfX,
                    pdfY,
                    pdfWidth,
                    pdfHeight,
                    currentPage);

                // Обновляем PDF (при этом, если в параметрах URL не указан зум, он может сбрасываться)
                pdfStream = updatedPdfStream;
                // Можно попытаться сохранить текущий зум: например, извлечь его из URL или хранить в отдельной переменной
                pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfStream.ToArray())}#view=FitH";

                StateHasChanged();
            }
        }
    }
    
    public void Dispose()
    {
        pdfStream?.Dispose();
    }
}
