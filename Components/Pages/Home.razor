@page "/"
@using VoidPDF.Core
@using VoidPDF.Data.Helpers
@using MudBlazor
@using VoidPDF.Data
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
<PageTitle>PDF Sanitizer</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <!-- Верхняя зона загрузки файлов -->

    <MudStack Style="width: 100%">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       @ref="@_fileUpload"
                       OnFilesChanged="OnInputFileChanged"
                       AppendMultipleFiles
                       Hidden="@false"
                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                       InputStyle="opacity:0"
                       tabindex="-1"
                       @ondrop="@ClearDragClass"
                       @ondragenter="@SetDragClass"
                       @ondragleave="@ClearDragClass"
                       @ondragend="@ClearDragClass">
            <ActivatorContent>
                <MudPaper Height="300px"
                          Outlined="true"
                          Class="@_dragClass">
                    <MudText Typo="Typo.h6">
                        Drag and drop files here or click
                    </MudText>
                    @foreach (var file in _fileNames)
                    {
                        <MudChip T="string"
                                 Color="Color.Dark"
                                 Text="@file"
                                 tabindex="-1"/>
                    }
                </MudPaper>
            </ActivatorContent>
        </MudFileUpload>
        <MudToolBar Gutters="@false"
                    Class="relative d-flex justify-end gap-4">
            <MudButton Color="Color.Primary"
                       OnClick="@OpenFilePickerAsync"
                       Variant="Variant.Filled">
                Open file picker
            </MudButton>
            <MudButton Color="Color.Primary"
                       Disabled="@(!_fileNames.Any())"
                       OnClick="@Upload"
                       Variant="Variant.Filled">
                Upload
            </MudButton>
            <MudButton Color="Color.Error"
                       Disabled="@(!_fileNames.Any())"
                       OnClick="@ClearAsync"
                       Variant="Variant.Filled">
                Clear
            </MudButton>
        </MudToolBar>
    </MudStack>
    @*<MudPaper Class="pa-6 d-flex flex-column align-center justify-center" Elevation="4">
        <MudText Typo="Typo.h6" Align="Align.Center">Перетащите PDF-файлы сюда</MudText>
        <InputFile OnChange="OnFilesSelected" accept=".pdf" multiple style="margin: 20px auto; display: block;"/>
    </MudPaper>*@

    <!-- Панель настроек -->
    <MudGrid Class="mt-6">
        <!-- Левый столбец: чекбоксы для параметров очистки -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudSwitch @bind-Value="fullClean" Color="Color.Success" UncheckedColor="Color.Error" Label="Full Clean"/>
                <MudSwitch @bind-Value="deleteJavaScript" Color="Color.Success" UncheckedColor="Color.Error" Label="Delete JavaScript" Disabled="fullClean"/>
                <MudSwitch @bind-Value="removeAnnotations" Color="Color.Success" UncheckedColor="Color.Error" Label="Remove Annotations" Disabled="fullClean"/>
                <MudSwitch @bind-Value="removeFormFields" Color="Color.Success" UncheckedColor="Color.Error" Label="Remove Form Fields" Disabled="fullClean"/>
                <MudSwitch @bind-Value="removeAcroForms" Color="Color.Success" UncheckedColor="Color.Error" Label="Remove AcroForms" Disabled="fullClean"/>
                <MudSwitch @bind-Value="removeActions" Color="Color.Success" UncheckedColor="Color.Error" Label="Remove Actions" Disabled="fullClean"/>
                <MudSwitch @bind-Value="removeEmbeddedFiles" Color="Color.Success" UncheckedColor="Color.Error" Label="Remove Embedded Files" Disabled="fullClean"/>
                <MudSwitch @bind-Value="clearMetadata" Color="Color.Success" UncheckedColor="Color.Error" Label="Clear Metadata" Disabled="fullClean"/>

            </MudPaper>
        </MudItem>
        <!-- Правый столбец: ручное редактирование метаданных -->
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Redact Metadata Manually</MudText>
                <MudTextField Label="Title" @bind-Value="manualTitle"/>
                <MudTextField Label="Author" @bind-Value="manualAuthor"/>
                <MudTextField Label="Subject" @bind-Value="manualSubject"/>
                <MudTextField Label="Creator" @bind-Value="manualCreator"/>
                <MudTextField Label="Producer" @bind-Value="manualProducer"/>
                <MudTextField Label="Keywords" @bind-Value="manualKeywords"/>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Секция для отображения метаданных последнего добавленного файла -->
    @if (uploadedFiles.Any())
    {
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.h6">Last Added File Metadata</MudText>
            @if (uploadedFiles.Last().Metadata is not null)
            {
                <MudText>Title: @uploadedFiles.Last().Metadata.Title</MudText>
                <MudText>Author: @uploadedFiles.Last().Metadata.Author</MudText>
                <MudText>Subject: @uploadedFiles.Last().Metadata.Subject</MudText>
                <MudText>Creator: @uploadedFiles.Last().Metadata.Creator</MudText>
                <MudText>Producer: @uploadedFiles.Last().Metadata.Producer</MudText>
                <MudText>Keywords: @uploadedFiles.Last().Metadata.Keywords</MudText>
            }
            else
            {
                <MudText>Problems with metadata retrieval</MudText>
            }
        </MudPaper>
    }

    <!-- Кнопки обработки и скачивания файлов -->
    <MudButton Class="mt-4 mr-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="ProcessFiles" Disabled="@(!uploadedFiles.Any())">
        Process PDF's
    </MudButton>
    <MudButton Class="mt-4" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="DownloadProcessedFiles" Disabled="@(!processedFiles.Any())">
        Download All
    </MudButton>

    <!-- Список загруженных файлов -->
    @if (uploadedFiles.Any())
    {
        <MudList T="FileData" Class="mt-4">
            @foreach (var file in uploadedFiles)
            {
                <MudListItem T="FileData">
                    <MudListItemText>@file.FileName</MudListItemText>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveFile(file))"/>
                </MudListItem>
            }
        </MudList>
    }

    <!-- Список обработанных файлов с кнопкой скачивания -->
    @if (processedFiles.Any())
    {
        <MudList T="FileData" Class="mt-4">
            @foreach (var file in processedFiles)
            {
                <MudListItem T="FileData">
                    <MudListItemText>@file.FileName</MudListItemText>
                    <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" OnClick="@(() => DownloadFile(file))"/>
                </MudListItem>
            }
        </MudList>
    }
</MudContainer>

@code {
#nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }

        OnFilesSelected(e);
    }

    private void Upload()
    {
// Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Uploaded");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

}

@code {
    private const long MaxFileSize = 40L * 1024L * 1024L;
    private List<FileData> uploadedFiles = new();
    private List<FileData> processedFiles = new();

    private bool fullClean = false;
    private bool deleteJavaScript = false;
    private bool removeAnnotations = false;
    private bool removeFormFields = false;
    private bool removeAcroForms = false;
    private bool removeActions = false;
    private bool removeEmbeddedFiles = false;
    private bool clearMetadata = false;

    private void OnFullCleanChanged(bool value)
    {
        fullClean = value;

        deleteJavaScript = value;
        removeAnnotations = value;
        removeFormFields = value;
        removeAcroForms = value;
        removeActions = value;
        removeEmbeddedFiles = value;
        clearMetadata = value;

        StateHasChanged(); //hook
    }


    private string manualTitle = "";
    private string manualAuthor = "";
    private string manualSubject = "";
    private string manualCreator = "";
    private string manualProducer = "";
    private string manualKeywords = "";

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var fileBytes = ms.ToArray();
            var metadata = await GetPdfMetadata(fileBytes);
            uploadedFiles.Add(new FileData
            {
                FileName = file.Name,
                FileBytes = fileBytes,
                Metadata = metadata
            });
        }
    }

    private async Task<Metadata?> GetPdfMetadata(byte[] pdfBytes)
    {
        try
        {
            await using var ms = new MemoryStream(pdfBytes);
            using var reader = new iText.Kernel.Pdf.PdfReader(ms);
            using var pdfDoc = new iText.Kernel.Pdf.PdfDocument(reader);
            var info = pdfDoc.GetDocumentInfo();
            return PdfSanitizer.GetActualMetaData(info);
        }
        catch
        {
            return null;
        }
    }

    private void RemoveFile(FileData file)
    {
        uploadedFiles.Remove(file);
    }

    private async Task ProcessFiles()
    {
        var options = new SanitizeOptions
        {
            FullClean = fullClean,
            DeleteJavaScript = deleteJavaScript,
            RemoveAnnotations = removeAnnotations,
            RemoveFormFields = removeFormFields,
            ClearMetadata = clearMetadata,
            RemoveAcroForms = removeAcroForms,
            RemoveEmbeddedFiles = removeEmbeddedFiles,
            RemoveActions = removeActions
        };

        Metadata? metadata = null;
        if (!string.IsNullOrWhiteSpace(manualTitle) ||
            !string.IsNullOrWhiteSpace(manualAuthor) ||
            !string.IsNullOrWhiteSpace(manualSubject) ||
            !string.IsNullOrWhiteSpace(manualCreator) ||
            !string.IsNullOrWhiteSpace(manualProducer) ||
            !string.IsNullOrWhiteSpace(manualKeywords))
        {
            metadata = new Metadata
            {
                Title = manualTitle,
                Author = manualAuthor,
                Subject = manualSubject,
                Creator = manualCreator,
                Producer = manualProducer,
                Keywords = manualKeywords
            };
        }

        processedFiles.Clear();

        foreach (var file in uploadedFiles)
        {
            var processedFile = new FileData
            {
                FileName = $"processed_{file.FileName}",
                FileBytes = await PdfSanitizer.SanitizeAsync(file.FileBytes, metadata, options)
            };
            processedFiles.Add(processedFile);
        }

        uploadedFiles.Clear();
    }
    /*private async Task ProcessFiles()
    {
        var option = new QuickSanitizeOptions();
        if (js) option = QuickSanitizeOptions.JavaScript;
        if (fullClean) option = QuickSanitizeOptions.FullClean;

        Metadata? metadata = null;
        if (!string.IsNullOrWhiteSpace(manualTitle) ||
            !string.IsNullOrWhiteSpace(manualAuthor) ||
            !string.IsNullOrWhiteSpace(manualSubject) ||
            !string.IsNullOrWhiteSpace(manualCreator) ||
            !string.IsNullOrWhiteSpace(manualProducer) ||
            !string.IsNullOrWhiteSpace(manualKeywords))
        {
            metadata = new Metadata
            {
                Title = manualTitle,
                Author = manualAuthor,
                Subject = manualSubject,
                Creator = manualCreator,
                Producer = manualProducer,
                Keywords = manualKeywords
            };
        }

        processedFiles.Clear();
        foreach (var file in uploadedFiles)
        {
            var processedFile = new FileData
            {
                FileName = $"processed_{file.FileName}",
                FileBytes = await PdfSanitizer.SanitizeAsync(file.FileBytes, metadata, option)
            };
            processedFiles.Add(processedFile);
        }

        uploadedFiles.Clear();
    }*/


    private async Task DownloadFile(FileData file)
    {
        var fileBase64 = Convert.ToBase64String(file.FileBytes);
        var fileName = file.FileName;
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, fileBase64);
    }

    private async Task DownloadProcessedFiles()
    {
        foreach (var file in processedFiles)
        {
            await DownloadFile(file);
        }
    }

    private class FileData
    {
        public string FileName { get; set; } = string.Empty;
        public byte[] FileBytes { get; set; } = Array.Empty<byte>();
        public Metadata? Metadata { get; set; }
    }

}